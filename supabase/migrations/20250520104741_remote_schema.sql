drop policy "Enable delete for users based on user_id" on "public"."events";

drop policy "Enable update for users based on user_id" on "public"."events";

alter table "public"."events" drop constraint "events_user_id_fkey";

create table "public"."chatroom_members" (
    "id" bigint generated by default as identity not null,
    "room_id" bigint not null,
    "user_id" uuid default gen_random_uuid(),
    "joinedAt" timestamp with time zone default now()
);


alter table "public"."chatroom_members" enable row level security;

create table "public"."chatrooms" (
    "id" bigint generated by default as identity not null,
    "event_id" bigint,
    "name" character varying,
    "created_by" uuid default gen_random_uuid(),
    "created_at" timestamp with time zone default now()
);


alter table "public"."chatrooms" enable row level security;

create table "public"."event_participants" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid default gen_random_uuid(),
    "event_id" bigint,
    "joined_at" timestamp with time zone
);


alter table "public"."event_participants" enable row level security;

create table "public"."messages" (
    "id" bigint generated by default as identity not null,
    "room_id" bigint,
    "created_at" timestamp with time zone not null default now(),
    "sender_id" uuid default gen_random_uuid(),
    "content" character varying,
    "sendAt" timestamp with time zone default now()
);


alter table "public"."messages" enable row level security;

alter table "public"."events" drop column "user_id";

alter table "public"."events" add column "owner_id" uuid not null;

CREATE UNIQUE INDEX chatroom_members_pkey ON public.chatroom_members USING btree (id);

CREATE UNIQUE INDEX chatrooms_pkey ON public.chatrooms USING btree (id);

CREATE UNIQUE INDEX event_participants_pkey ON public.event_participants USING btree (id);

CREATE UNIQUE INDEX messages_pkey ON public.messages USING btree (id);

alter table "public"."chatroom_members" add constraint "chatroom_members_pkey" PRIMARY KEY using index "chatroom_members_pkey";

alter table "public"."chatrooms" add constraint "chatrooms_pkey" PRIMARY KEY using index "chatrooms_pkey";

alter table "public"."event_participants" add constraint "event_participants_pkey" PRIMARY KEY using index "event_participants_pkey";

alter table "public"."messages" add constraint "messages_pkey" PRIMARY KEY using index "messages_pkey";

alter table "public"."chatroom_members" add constraint "chatroom_members_room_id_fkey" FOREIGN KEY (room_id) REFERENCES chatrooms(id) not valid;

alter table "public"."chatroom_members" validate constraint "chatroom_members_room_id_fkey";

alter table "public"."chatroom_members" add constraint "chatroom_members_user_id_fkey" FOREIGN KEY (user_id) REFERENCES members(uuid) not valid;

alter table "public"."chatroom_members" validate constraint "chatroom_members_user_id_fkey";

alter table "public"."chatrooms" add constraint "chatrooms_created_by_fkey" FOREIGN KEY (created_by) REFERENCES members(uuid) not valid;

alter table "public"."chatrooms" validate constraint "chatrooms_created_by_fkey";

alter table "public"."chatrooms" add constraint "chatrooms_event_id_fkey" FOREIGN KEY (event_id) REFERENCES events(id) not valid;

alter table "public"."chatrooms" validate constraint "chatrooms_event_id_fkey";

alter table "public"."event_participants" add constraint "event_participants_event_id_fkey" FOREIGN KEY (event_id) REFERENCES events(id) not valid;

alter table "public"."event_participants" validate constraint "event_participants_event_id_fkey";

alter table "public"."event_participants" add constraint "event_participants_user_id_fkey" FOREIGN KEY (user_id) REFERENCES members(uuid) not valid;

alter table "public"."event_participants" validate constraint "event_participants_user_id_fkey";

alter table "public"."events" add constraint "events_owner_id_fkey" FOREIGN KEY (owner_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."events" validate constraint "events_owner_id_fkey";

alter table "public"."messages" add constraint "messages_room_id_fkey" FOREIGN KEY (room_id) REFERENCES chatrooms(id) not valid;

alter table "public"."messages" validate constraint "messages_room_id_fkey";

alter table "public"."messages" add constraint "messages_sender_id_fkey" FOREIGN KEY (sender_id) REFERENCES members(uuid) not valid;

alter table "public"."messages" validate constraint "messages_sender_id_fkey";

grant delete on table "public"."chatroom_members" to "anon";

grant insert on table "public"."chatroom_members" to "anon";

grant references on table "public"."chatroom_members" to "anon";

grant select on table "public"."chatroom_members" to "anon";

grant trigger on table "public"."chatroom_members" to "anon";

grant truncate on table "public"."chatroom_members" to "anon";

grant update on table "public"."chatroom_members" to "anon";

grant delete on table "public"."chatroom_members" to "authenticated";

grant insert on table "public"."chatroom_members" to "authenticated";

grant references on table "public"."chatroom_members" to "authenticated";

grant select on table "public"."chatroom_members" to "authenticated";

grant trigger on table "public"."chatroom_members" to "authenticated";

grant truncate on table "public"."chatroom_members" to "authenticated";

grant update on table "public"."chatroom_members" to "authenticated";

grant delete on table "public"."chatroom_members" to "service_role";

grant insert on table "public"."chatroom_members" to "service_role";

grant references on table "public"."chatroom_members" to "service_role";

grant select on table "public"."chatroom_members" to "service_role";

grant trigger on table "public"."chatroom_members" to "service_role";

grant truncate on table "public"."chatroom_members" to "service_role";

grant update on table "public"."chatroom_members" to "service_role";

grant delete on table "public"."chatrooms" to "anon";

grant insert on table "public"."chatrooms" to "anon";

grant references on table "public"."chatrooms" to "anon";

grant select on table "public"."chatrooms" to "anon";

grant trigger on table "public"."chatrooms" to "anon";

grant truncate on table "public"."chatrooms" to "anon";

grant update on table "public"."chatrooms" to "anon";

grant delete on table "public"."chatrooms" to "authenticated";

grant insert on table "public"."chatrooms" to "authenticated";

grant references on table "public"."chatrooms" to "authenticated";

grant select on table "public"."chatrooms" to "authenticated";

grant trigger on table "public"."chatrooms" to "authenticated";

grant truncate on table "public"."chatrooms" to "authenticated";

grant update on table "public"."chatrooms" to "authenticated";

grant delete on table "public"."chatrooms" to "service_role";

grant insert on table "public"."chatrooms" to "service_role";

grant references on table "public"."chatrooms" to "service_role";

grant select on table "public"."chatrooms" to "service_role";

grant trigger on table "public"."chatrooms" to "service_role";

grant truncate on table "public"."chatrooms" to "service_role";

grant update on table "public"."chatrooms" to "service_role";

grant delete on table "public"."event_participants" to "anon";

grant insert on table "public"."event_participants" to "anon";

grant references on table "public"."event_participants" to "anon";

grant select on table "public"."event_participants" to "anon";

grant trigger on table "public"."event_participants" to "anon";

grant truncate on table "public"."event_participants" to "anon";

grant update on table "public"."event_participants" to "anon";

grant delete on table "public"."event_participants" to "authenticated";

grant insert on table "public"."event_participants" to "authenticated";

grant references on table "public"."event_participants" to "authenticated";

grant select on table "public"."event_participants" to "authenticated";

grant trigger on table "public"."event_participants" to "authenticated";

grant truncate on table "public"."event_participants" to "authenticated";

grant update on table "public"."event_participants" to "authenticated";

grant delete on table "public"."event_participants" to "service_role";

grant insert on table "public"."event_participants" to "service_role";

grant references on table "public"."event_participants" to "service_role";

grant select on table "public"."event_participants" to "service_role";

grant trigger on table "public"."event_participants" to "service_role";

grant truncate on table "public"."event_participants" to "service_role";

grant update on table "public"."event_participants" to "service_role";

grant delete on table "public"."messages" to "anon";

grant insert on table "public"."messages" to "anon";

grant references on table "public"."messages" to "anon";

grant select on table "public"."messages" to "anon";

grant trigger on table "public"."messages" to "anon";

grant truncate on table "public"."messages" to "anon";

grant update on table "public"."messages" to "anon";

grant delete on table "public"."messages" to "authenticated";

grant insert on table "public"."messages" to "authenticated";

grant references on table "public"."messages" to "authenticated";

grant select on table "public"."messages" to "authenticated";

grant trigger on table "public"."messages" to "authenticated";

grant truncate on table "public"."messages" to "authenticated";

grant update on table "public"."messages" to "authenticated";

grant delete on table "public"."messages" to "service_role";

grant insert on table "public"."messages" to "service_role";

grant references on table "public"."messages" to "service_role";

grant select on table "public"."messages" to "service_role";

grant trigger on table "public"."messages" to "service_role";

grant truncate on table "public"."messages" to "service_role";

grant update on table "public"."messages" to "service_role";

create policy "Enable delete for users based on user_id"
on "public"."events"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = owner_id));


create policy "Enable update for users based on user_id"
on "public"."events"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = owner_id));



