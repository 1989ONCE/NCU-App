create table "public"."comments" (
    "id" bigint generated by default as identity not null,
    "event_id" bigint not null,
    "user_id" uuid default gen_random_uuid(),
    "content" character varying,
    "created_at" timestamp with time zone default now()
);


alter table "public"."comments" enable row level security;

CREATE UNIQUE INDEX comments_pkey ON public.comments USING btree (id);

alter table "public"."comments" add constraint "comments_pkey" PRIMARY KEY using index "comments_pkey";

alter table "public"."comments" add constraint "comments_event_id_fkey" FOREIGN KEY (event_id) REFERENCES events(id) not valid;

alter table "public"."comments" validate constraint "comments_event_id_fkey";

alter table "public"."comments" add constraint "comments_user_id_fkey" FOREIGN KEY (user_id) REFERENCES members(uuid) not valid;

alter table "public"."comments" validate constraint "comments_user_id_fkey";

grant delete on table "public"."comments" to "anon";

grant insert on table "public"."comments" to "anon";

grant references on table "public"."comments" to "anon";

grant select on table "public"."comments" to "anon";

grant trigger on table "public"."comments" to "anon";

grant truncate on table "public"."comments" to "anon";

grant update on table "public"."comments" to "anon";

grant delete on table "public"."comments" to "authenticated";

grant insert on table "public"."comments" to "authenticated";

grant references on table "public"."comments" to "authenticated";

grant select on table "public"."comments" to "authenticated";

grant trigger on table "public"."comments" to "authenticated";

grant truncate on table "public"."comments" to "authenticated";

grant update on table "public"."comments" to "authenticated";

grant delete on table "public"."comments" to "service_role";

grant insert on table "public"."comments" to "service_role";

grant references on table "public"."comments" to "service_role";

grant select on table "public"."comments" to "service_role";

grant trigger on table "public"."comments" to "service_role";

grant truncate on table "public"."comments" to "service_role";

grant update on table "public"."comments" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."chatroom_members"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."chatroom_members"
as permissive
for select
to public
using (true);


create policy "Enable update for authenticated users "
on "public"."chatroom_members"
as permissive
for update
to authenticated
using (true);



